'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._getAllTasksStatus = exports._setTaskStatus = exports._getTaskStatus = exports._registerTask = exports.taskSTATES = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _eventEmitter = require('event-emitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var emitter = (0, _eventEmitter2.default)({});
var _tasksStatus = new WeakMap();

var taskSTATES = exports.taskSTATES = {
  running: 'running',
  delayed: 'delayed',
  stopping: 'stopping',
  stopped: 'stopped'
};

var _registerTask = exports._registerTask = function _registerTask(taskName) {
  var self = this;
  var tasksStatus = _tasksStatus.get(self) || [];
  var taskStatusIndex = _lodash2.default.findIndex(tasksStatus, { taskName: taskName });
  if (taskStatusIndex !== -1) {
    throw new Error(self.me + '.registerTask: Task ' + taskName + ' is already registered');
  }

  tasksStatus.push({
    taskName: taskName,
    state: taskSTATES.stopped,
    lastRunAt: new Date(0),
    delayedMS: null,
    timeoutId: null,
    next: null
  });

  _tasksStatus.set(self, tasksStatus);
};

var _getTaskStatus = exports._getTaskStatus = function _getTaskStatus(taskName) {
  var self = this;

  var tasksStatus = _getAllTasksStatus.call(self);
  var taskStatusIndex = _lodash2.default.findIndex(tasksStatus, { taskName: taskName });
  if (taskStatusIndex > -1) {
    return tasksStatus[taskStatusIndex];
  } else {
    return null;
  }
};

var _setTaskStatus = exports._setTaskStatus = function _setTaskStatus(status) {
  var self = this;

  var tasksStatus = _tasksStatus.get(self) || [];
  var taskName = status.taskName;
  var taskStatusIndex = _lodash2.default.findIndex(tasksStatus, { taskName: taskName });
  if (taskStatusIndex === -1) {
    throw new Error(self.me + '.setTaskStatus: Task ' + taskName + ' is not registered');
  }

  tasksStatus[taskStatusIndex] = status;
  _tasksStatus.set(self, tasksStatus);
};

var _getAllTasksStatus = exports._getAllTasksStatus = function _getAllTasksStatus() {
  var self = this;
  var result = _tasksStatus.get(self);
  return result || [];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdGFza1N0YXRlVXRpbHMuanMiXSwibmFtZXMiOlsiZW1pdHRlciIsIl90YXNrc1N0YXR1cyIsIldlYWtNYXAiLCJ0YXNrU1RBVEVTIiwicnVubmluZyIsImRlbGF5ZWQiLCJzdG9wcGluZyIsInN0b3BwZWQiLCJfcmVnaXN0ZXJUYXNrIiwidGFza05hbWUiLCJzZWxmIiwidGFza3NTdGF0dXMiLCJnZXQiLCJ0YXNrU3RhdHVzSW5kZXgiLCJmaW5kSW5kZXgiLCJFcnJvciIsIm1lIiwicHVzaCIsInN0YXRlIiwibGFzdFJ1bkF0IiwiRGF0ZSIsImRlbGF5ZWRNUyIsInRpbWVvdXRJZCIsIm5leHQiLCJzZXQiLCJfZ2V0VGFza1N0YXR1cyIsIl9nZXRBbGxUYXNrc1N0YXR1cyIsImNhbGwiLCJfc2V0VGFza1N0YXR1cyIsInN0YXR1cyIsInJlc3VsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFJQSxVQUFVLDRCQUFHLEVBQUgsQ0FBZDtBQUNBLElBQUlDLGVBQWUsSUFBSUMsT0FBSixFQUFuQjs7QUFFTyxJQUFNQyxrQ0FBYTtBQUN4QkMsV0FBUyxTQURlO0FBRXhCQyxXQUFTLFNBRmU7QUFHeEJDLFlBQVUsVUFIYztBQUl4QkMsV0FBUztBQUplLENBQW5COztBQVFBLElBQU1DLHdDQUFnQixTQUFTQSxhQUFULENBQXVCQyxRQUF2QixFQUFpQztBQUM1RCxNQUFNQyxPQUFPLElBQWI7QUFDQSxNQUFJQyxjQUFjVixhQUFhVyxHQUFiLENBQWlCRixJQUFqQixLQUEwQixFQUE1QztBQUNBLE1BQU1HLGtCQUFrQixpQkFBRUMsU0FBRixDQUFZSCxXQUFaLEVBQXlCLEVBQUVGLFVBQVVBLFFBQVosRUFBekIsQ0FBeEI7QUFDQSxNQUFJSSxvQkFBb0IsQ0FBQyxDQUF6QixFQUE0QjtBQUMxQixVQUFNLElBQUlFLEtBQUosQ0FBYUwsS0FBS00sRUFBbEIsNEJBQTJDUCxRQUEzQyw0QkFBTjtBQUNEOztBQUVERSxjQUFZTSxJQUFaLENBQWlCO0FBQ2ZSLGNBQVVBLFFBREs7QUFFZlMsV0FBT2YsV0FBV0ksT0FGSDtBQUdmWSxlQUFXLElBQUlDLElBQUosQ0FBUyxDQUFULENBSEk7QUFJZkMsZUFBVyxJQUpJO0FBS2ZDLGVBQVcsSUFMSTtBQU1mQyxVQUFLO0FBTlUsR0FBakI7O0FBU0F0QixlQUFhdUIsR0FBYixDQUFpQmQsSUFBakIsRUFBdUJDLFdBQXZCO0FBQ0QsQ0FsQk07O0FBb0JBLElBQU1jLDBDQUFpQixTQUFTQSxjQUFULENBQXdCaEIsUUFBeEIsRUFBa0M7QUFDOUQsTUFBTUMsT0FBTyxJQUFiOztBQUVBLE1BQUlDLGNBQWNlLG1CQUFtQkMsSUFBbkIsQ0FBd0JqQixJQUF4QixDQUFsQjtBQUNBLE1BQU1HLGtCQUFrQixpQkFBRUMsU0FBRixDQUFZSCxXQUFaLEVBQXlCLEVBQUVGLFVBQVVBLFFBQVosRUFBekIsQ0FBeEI7QUFDQSxNQUFJSSxrQkFBa0IsQ0FBQyxDQUF2QixFQUEwQjtBQUN4QixXQUFPRixZQUFZRSxlQUFaLENBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPLElBQVA7QUFDRDtBQUNGLENBVk07O0FBWUEsSUFBTWUsMENBQWlCLFNBQVNBLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDO0FBQzVELE1BQU1uQixPQUFPLElBQWI7O0FBRUEsTUFBTUMsY0FBY1YsYUFBYVcsR0FBYixDQUFpQkYsSUFBakIsS0FBMEIsRUFBOUM7QUFDQSxNQUFNRCxXQUFXb0IsT0FBT3BCLFFBQXhCO0FBQ0EsTUFBTUksa0JBQWtCLGlCQUFFQyxTQUFGLENBQVlILFdBQVosRUFBeUIsRUFBRUYsVUFBVUEsUUFBWixFQUF6QixDQUF4QjtBQUNBLE1BQUlJLG9CQUFvQixDQUFDLENBQXpCLEVBQTRCO0FBQzFCLFVBQU0sSUFBSUUsS0FBSixDQUFhTCxLQUFLTSxFQUFsQiw2QkFBNENQLFFBQTVDLHdCQUFOO0FBQ0Q7O0FBRURFLGNBQVlFLGVBQVosSUFBK0JnQixNQUEvQjtBQUNBNUIsZUFBYXVCLEdBQWIsQ0FBaUJkLElBQWpCLEVBQXVCQyxXQUF2QjtBQUNELENBWk07O0FBY0EsSUFBTWUsa0RBQXFCLFNBQVNBLGtCQUFULEdBQThCO0FBQzlELE1BQU1oQixPQUFPLElBQWI7QUFDQSxNQUFJb0IsU0FBUzdCLGFBQWFXLEdBQWIsQ0FBaUJGLElBQWpCLENBQWI7QUFDQSxTQUFRb0IsVUFBVSxFQUFsQjtBQUNELENBSk0iLCJmaWxlIjoidGFza1N0YXRlVXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgZWUgZnJvbSAnZXZlbnQtZW1pdHRlcic7XG5cbmxldCBlbWl0dGVyID0gZWUoe30pO1xubGV0IF90YXNrc1N0YXR1cyA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCBjb25zdCB0YXNrU1RBVEVTID0ge1xuICBydW5uaW5nOiAncnVubmluZycsXG4gIGRlbGF5ZWQ6ICdkZWxheWVkJyxcbiAgc3RvcHBpbmc6ICdzdG9wcGluZycsXG4gIHN0b3BwZWQ6ICdzdG9wcGVkJyxcbn07XG5cblxuZXhwb3J0IGNvbnN0IF9yZWdpc3RlclRhc2sgPSBmdW5jdGlvbiBfcmVnaXN0ZXJUYXNrKHRhc2tOYW1lKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICBsZXQgdGFza3NTdGF0dXMgPSBfdGFza3NTdGF0dXMuZ2V0KHNlbGYpIHx8IFtdO1xuICBjb25zdCB0YXNrU3RhdHVzSW5kZXggPSBfLmZpbmRJbmRleCh0YXNrc1N0YXR1cywgeyB0YXNrTmFtZTogdGFza05hbWUgfSk7XG4gIGlmICh0YXNrU3RhdHVzSW5kZXggIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3NlbGYubWV9LnJlZ2lzdGVyVGFzazogVGFzayAke3Rhc2tOYW1lfSBpcyBhbHJlYWR5IHJlZ2lzdGVyZWRgKTtcbiAgfVxuXG4gIHRhc2tzU3RhdHVzLnB1c2goe1xuICAgIHRhc2tOYW1lOiB0YXNrTmFtZSxcbiAgICBzdGF0ZTogdGFza1NUQVRFUy5zdG9wcGVkLFxuICAgIGxhc3RSdW5BdDogbmV3IERhdGUoMCksXG4gICAgZGVsYXllZE1TOiBudWxsLFxuICAgIHRpbWVvdXRJZDogbnVsbCxcbiAgICBuZXh0Om51bGwsXG4gIH0pO1xuXG4gIF90YXNrc1N0YXR1cy5zZXQoc2VsZiwgdGFza3NTdGF0dXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IF9nZXRUYXNrU3RhdHVzID0gZnVuY3Rpb24gX2dldFRhc2tTdGF0dXModGFza05hbWUpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgbGV0IHRhc2tzU3RhdHVzID0gX2dldEFsbFRhc2tzU3RhdHVzLmNhbGwoc2VsZik7XG4gIGNvbnN0IHRhc2tTdGF0dXNJbmRleCA9IF8uZmluZEluZGV4KHRhc2tzU3RhdHVzLCB7IHRhc2tOYW1lOiB0YXNrTmFtZSB9KTtcbiAgaWYgKHRhc2tTdGF0dXNJbmRleCA+IC0xKSB7XG4gICAgcmV0dXJuIHRhc2tzU3RhdHVzW3Rhc2tTdGF0dXNJbmRleF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBfc2V0VGFza1N0YXR1cyA9IGZ1bmN0aW9uIF9zZXRUYXNrU3RhdHVzKHN0YXR1cykge1xuICBjb25zdCBzZWxmID0gdGhpcztcblxuICBjb25zdCB0YXNrc1N0YXR1cyA9IF90YXNrc1N0YXR1cy5nZXQoc2VsZikgfHwgW107XG4gIGNvbnN0IHRhc2tOYW1lID0gc3RhdHVzLnRhc2tOYW1lO1xuICBjb25zdCB0YXNrU3RhdHVzSW5kZXggPSBfLmZpbmRJbmRleCh0YXNrc1N0YXR1cywgeyB0YXNrTmFtZTogdGFza05hbWUgfSk7XG4gIGlmICh0YXNrU3RhdHVzSW5kZXggPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3NlbGYubWV9LnNldFRhc2tTdGF0dXM6IFRhc2sgJHt0YXNrTmFtZX0gaXMgbm90IHJlZ2lzdGVyZWRgKTtcbiAgfVxuXG4gIHRhc2tzU3RhdHVzW3Rhc2tTdGF0dXNJbmRleF0gPSBzdGF0dXM7XG4gIF90YXNrc1N0YXR1cy5zZXQoc2VsZiwgdGFza3NTdGF0dXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IF9nZXRBbGxUYXNrc1N0YXR1cyA9IGZ1bmN0aW9uIF9nZXRBbGxUYXNrc1N0YXR1cygpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGxldCByZXN1bHQgPSBfdGFza3NTdGF0dXMuZ2V0KHNlbGYpO1xuICByZXR1cm4gIHJlc3VsdCB8fCBbXTtcbn07XG5cbiJdfQ==